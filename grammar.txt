Program -> {Block}
           | Procedure
           | Function

Block -> {Expression}*

Function -> FUNCTION IDENTIFIER [LPRN [BYREF | BYVAL] IDENTIFIER : (DataType | IDENTIFIER) {, [BYREF | BYVAL] IDENTIFIER : (DataType | IDENTIFIER)} RPRN] RETURNS (DataType | IDENTIFIER) Block ENDPROCEDURE

Procedure -> PROCEDURE IDENTIFIER [LPRN [BYREF | BYVAL] IDENTIFIER : (DataType | IDENTIFIER) {, [BYREF | BYVAL] IDENTIFIER : (DataType | IDENTIFIER)} RPRN] Block ENDPROCEDURE

Expression -> EvaluationExpression
              | DeclareStatement
              | CONSTANT IDENTIFIER = INTEGER | -INTEGER | REAL | -REAL | BOOLEAN | CHAR | STRING
              | TYPE IDENTIFIER = (LPRN {IDENTIFIER}* RPRN) | ^DataType
              | CompositeType
              | IfCondition
              | CaseStatement
              | WhileLoop
              | ForLoop
              | CALL IDENTIFIER[LPRN EvaluationExpression {, EvaluationExpression} RPRN]
              | RETURN EvaluationExpression
              | BREAK
              | CONTINUE
              | (OUTPUT | PRINT) EvaluationExpression {, EvaluationExpression}
              | (INPUT | READ) IdentifierExpression
              | OPENFILE StringExpression FOR (READ | WRITE | APPEND)
              | READFILE StringExpression, IDENTIFIER
              | WRITEFILE StringExpression, EvaluationExpression
              | CLOSEFILE StringExpression

CompositeType -> TYPE IDENTIFIER {DeclareStatement}* ENDTYPE

DeclareStatement -> DECLARE IDENTIFIER{, IDENTIFIER} : [ARRAY LSQRB EvaluationExpression:EvaluationExpression {EvaluationExpression:EvaluationExpression} RSQRB OF] (DataType | IDENTIFIER)

ForLoop -> FOR IDENTIFIER <- ArithmeticExpression TO ArithmeticExpression [STEP ArithmeticExpression] Block NEXT [IDENTIFIER]

RepeatUntilLoop -> REPEAT Block UNTIL EvaluationExpression

WhileLoop -> WHILE EvaluationExpression DO Block ENDWHILE

CaseStatement -> CASE OF EvaluationExpression {EvaluationExpression[ TO EvaluationExpression] : Block} [OTHERWISE : Block] ENDCASE

IfCondition -> IF EvaluationExpression THEN Block {ELSE IF EvaluationExpression THEN Block} [ELSE Block] ENDIF

DataType -> L_INTEGER | L_REAL | L_BOOLEAN | L_CHAR | L_STRING

EvaluationExpression -> LogicalExpression {(= | <>) LogicalExpression}

LogicalExpression -> ComparisonExpression {(AND | OR) ComparisonExpression}

ComparisonExpression -> ArithmeticExpression {(> | < | >= | <= | = | <>) ArithmeticExpression}
                        | NOT ComparisonExpression

StringExpression -> ArithmeticExpression {& ArithmeticExpression}

ArithmeticExpression -> Term {(+ | -) Term}

Term -> Factor {(* | / | DIV | MOD) Factor}

Factor -> Atom | -Atom

Atom -> INTEGER
        | REAL
        | TRUE
        | FALSE
        | CHAR
        | STRING
        | (MOD | DIV) LPRN EvaluationExpression, EvaluationExpression RPRN
        | DataType LPRN EvaluationExpression RPRN
        | LPRN EvaluationExpression RPRN
        | IdentifierExpression
        | IdentifierExpression <- EvaluationExpression | ^IdentifierExpression
        | IDENTIFIER LPRN [EvaluationExpression {, EvaluationExpression}] RPRN

IdentifierExpression -> SingleIdentifier{.SingleIdentifier | ^ | LSQRB ArithmeticExpression {, ArithmeticExpression} RSQRB}

---- Definitions ----
X | Y - X or Y
[X] - Optional
{X} - Zero or many
{X}* - One or many

LPRN/RPRN - Left/Right parentheses
LSQRB/RSQRB - Left/Right square brackets
